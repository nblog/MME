@page "/dataset-management"
@using MME.Domain.Repositories.Dataset
@using MME.Domain.Services
@using MME.Domain.Model
@using AntDesign
@using Microsoft.AspNetCore.Authorization
@using Microsoft.JSInterop
@using System.Text.Json
@using NPOI.XSSF.UserModel
@using NPOI.SS.UserModel
@using NPOI.HSSF.Util
@attribute [Authorize]
@inject IDatasetService DatasetService
@inject IMessageService MessageService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>数据集管理</PageTitle>

<div class="dataset-management-container">
    <PageHeader Title="数据集管理" SubTitle="管理模型评测用的数据集" Class="dataset-header">
        <PageHeaderExtra>
            <Space>
                <SpaceItem>
                    <Button Type="@ButtonType.Primary" Icon="plus" OnClick="ShowCreateModal">
                        创建数据集
                    </Button>
                </SpaceItem>
                <SpaceItem>
                    <Button Type="@ButtonType.Default" Icon="reload" OnClick="RefreshDatasets" Loading="@loading">
                        刷新
                    </Button>
                </SpaceItem>
            </Space>
        </PageHeaderExtra>
    </PageHeader>

    <Card Class="dataset-card" Bordered="false">
        <!-- 筛选区域 -->
        <div style="margin-bottom: 16px;">
            <Space Direction="SpaceDirection.Vertical" Style="width: 100%;">
                <SpaceItem>
                    <Space>
                        <SpaceItem>
                            <Input @bind-Value="searchName" Placeholder="搜索数据集名称" Style="width: 200px;" />
                        </SpaceItem>
                        <SpaceItem>
                            <Select @bind-Value="selectedType" TItemValue="string" TItem="string" Placeholder="选择类型" Style="width: 120px" AllowClear>
                                <SelectOptions>
                                    <SelectOption TItemValue="string" TItem="string" Label="问答" Value="@("QA")" />
                                    <SelectOption TItemValue="string" TItem="string" Label="对话" Value="@("Chat")" />
                                    <SelectOption TItemValue="string" TItem="string" Label="文本完成" Value="@("Completion")" />
                                </SelectOptions>
                            </Select>
                        </SpaceItem>
                        <SpaceItem>
                            <Select @bind-Value="selectedStatus" TItemValue="DatasetStatus?" TItem="DatasetStatus" Placeholder="选择状态" Style="width: 120px" AllowClear>
                                <SelectOptions>
                                    <SelectOption TItemValue="DatasetStatus?" TItem="DatasetStatus" Label="活跃" Value="DatasetStatus.Active" />
                                    <SelectOption TItemValue="DatasetStatus?" TItem="DatasetStatus" Label="归档" Value="DatasetStatus.Archived" />
                                </SelectOptions>
                            </Select>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Type="@ButtonType.Primary" Icon="search" OnClick="SearchDatasets">
                                搜索
                            </Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Icon="clear" OnClick="ClearFilters">
                                清空筛选
                            </Button>
                        </SpaceItem>
                    </Space>
                </SpaceItem>
            </Space>
        </div>

        <!-- 数据集表格 -->
        <Table DataSource="@datasets" TItem="DatasetDto" Loading="@loading" 
               Bordered Size="@TableSize.Small" ScrollX="1200px" 
               HidePagination="true">
            <AntDesign.Column Title="数据集名称" DataIndex="Name" TData="string" Width="200">
                <a href="/dataset-detail/@context.Id" style="text-decoration: none;">
                    <Text Strong>@context.Name</Text>
                </a>
                @if (!string.IsNullOrEmpty(context.Description))
                {
                    <br />
                    <small style="color: #8c8c8c; font-size: 12px;">@context.Description</small>
                }
            </AntDesign.Column>
            <AntDesign.Column Title="类型" DataIndex="Type" TData="string" Width="100">
                <Tag Color="@GetTypeColor(context.Type)">@context.TypeText</Tag>
            </AntDesign.Column>
            <AntDesign.Column Title="状态" DataIndex="Status" TData="DatasetStatus" Width="100">
                <Tag Color="@GetStatusColor(context.Status)">@context.StatusText</Tag>
            </AntDesign.Column>
            <AntDesign.Column Title="数据项数量" DataIndex="ItemCount" TData="int" Width="120">
                <Text Strong>@context.ItemCount</Text> 项
            </AntDesign.Column>
            <AntDesign.Column Title="创建者" DataIndex="Creator" TData="string" Width="120">
                @(context.Creator ?? "未知")
            </AntDesign.Column>
            <AntDesign.Column Title="创建时间" DataIndex="CreateTime" TData="DateTime" Width="150">
                <Tooltip Title="@context.CreateTime.ToString("yyyy-MM-dd HH:mm:ss")">
                    @context.CreateTime.ToString("yyyy-MM-dd")
                </Tooltip>
            </AntDesign.Column>
            <AntDesign.Column Title="更新时间" DataIndex="UpdateTime" TData="DateTime" Width="150">
                <Tooltip Title="@context.UpdateTime.ToString("yyyy-MM-dd HH:mm:ss")">
                    @context.UpdateTime.ToString("yyyy-MM-dd")
                </Tooltip>
            </AntDesign.Column>
            <ActionColumn Title="操作" Width="250">
                <Space>
                    <SpaceItem>
                        <Button Type="@ButtonType.Link" Size="@ButtonSize.Small" 
                                OnClick="() => ViewDataset(context.Id)">
                            查看
                        </Button>
                    </SpaceItem>
                    <SpaceItem>
                        <Button Type="@ButtonType.Link" Size="@ButtonSize.Small" 
                                OnClick="() => ShowEditModal(context)">
                            编辑
                        </Button>
                    </SpaceItem>
                    <SpaceItem>
                        <Dropdown>
                            <Overlay>
                                <Menu>
                                    <MenuItem OnClick="() => ExportDatasetToExcel(context.Id, context.Name)" Disabled="@exportLoading">
                                        <Icon Type="file-excel" /> 导出Excel
                                    </MenuItem>
                                    <MenuItem OnClick="() => ExportDatasetToLog(context.Id, context.Name)" Disabled="@exportLoading">
                                        <Icon Type="file-text" /> 导出Log文件
                                    </MenuItem>
                                </Menu>
                            </Overlay>
                            <ChildContent>
                                <Button Type="@ButtonType.Link" Size="@ButtonSize.Small" Loading="@exportLoading">
                                    导出 <Icon Type="down" />
                                </Button>
                            </ChildContent>
                        </Dropdown>
                    </SpaceItem>
                    <SpaceItem>
                        <Popconfirm Title="确定要删除这个数据集吗？" 
                                   OnConfirm="() => DeleteDataset(context.Id)"
                                   OkText="确定" CancelText="取消">
                            <Button Type="@ButtonType.Link" Size="@ButtonSize.Small" Danger>
                                删除
                            </Button>
                        </Popconfirm>
                    </SpaceItem>
                </Space>
            </ActionColumn>
        </Table>

        <!-- 分页 -->
        <div style="margin-top: 16px; text-align: right;">
            <Pagination Current="@currentPage" 
                       Total="@totalCount" 
                       PageSize="@pageSize" 
                       OnChange="OnPageChange" />
        </div>
    </Card>
</div>

<!-- 创建/编辑数据集模态框 -->
<Modal Title="@(editingDataset == null ? "创建数据集" : "编辑数据集")" 
       Visible="@createEditModalVisible" 
       Width="600"
       OnCancel="() => createEditModalVisible = false"
       OnOk="SaveDataset"
       ConfirmLoading="@saveLoading">
    <Form Model="@currentDatasetRequest" Layout="@FormLayout.Vertical">
        <FormItem Label="数据集名称" Required>
            <Input @bind-Value="currentDatasetRequest.Name" Placeholder="请输入数据集名称" MaxLength="200" />
        </FormItem>

        <FormItem Label="数据集类型" Required>
            <Select @bind-Value="currentDatasetRequest.Type" TItemValue="string" TItem="string" Placeholder="请选择数据集类型">
                <SelectOptions>
                    <SelectOption TItemValue="string" TItem="string" Label="问答 (QA)" Value="@("QA")" />
                    <SelectOption TItemValue="string" TItem="string" Label="对话 (Chat)" Value="@("Chat")" />
                    <SelectOption TItemValue="string" TItem="string" Label="文本完成 (Completion)" Value="@("Completion")" />
                </SelectOptions>
            </Select>
        </FormItem>

        <FormItem Label="描述">
            <TextArea @bind-Value="currentDatasetRequest.Description" Placeholder="请输入数据集描述" Rows="3" MaxLength="1000" />
        </FormItem>

        <FormItem Label="标签">
            <Input @bind-Value="@tagsInput" Placeholder="输入标签，用逗号分隔" OnPressEnter="AddTag" />
            @if (currentDatasetRequest.Tags.Any())
            {
                <div style="margin-top: 8px;">
                    @foreach (var tag in currentDatasetRequest.Tags)
                    {
                        <Tag Closable OnClose="() => RemoveTag(tag)" Style="margin-bottom: 4px;">
                            @tag
                        </Tag>
                    }
                </div>
            }
        </FormItem>

        <FormItem Label="创建者">
            <Input @bind-Value="currentDatasetRequest.Creator" Placeholder="请输入创建者名称" />
        </FormItem>
    </Form>
</Modal>

@code {
    private List<DatasetDto> datasets = new();
    private bool loading = false;
    private bool saveLoading = false;
    private bool exportLoading = false;
    
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalCount = 0;
    
    // 筛选条件
    private string searchName = "";
    private string? selectedType = null;
    private DatasetStatus? selectedStatus = null;
    
    // 创建/编辑模态框
    private bool createEditModalVisible = false;
    private DatasetDto? editingDataset = null;
    private CreateDatasetRequest currentDatasetRequest = new();
    private string tagsInput = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadDatasets();
    }

    private async Task LoadDatasets()
    {
        loading = true;
        StateHasChanged();

        try
        {
            var queryParams = new DatasetQueryParams
            {
                Name = string.IsNullOrWhiteSpace(searchName) ? null : searchName,
                Type = selectedType,
                Status = selectedStatus,
                Page = currentPage,
                PageSize = pageSize,
                SortField = "UpdateTime",
                SortDescending = true
            };

            var result = await DatasetService.GetDatasetsAsync(queryParams);
            datasets = result.List;
            totalCount = result.TotalCount;
        }
        catch (Exception ex)
        {
            _ = MessageService.Error($"加载数据集失败：{ex.Message}");
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshDatasets()
    {
        currentPage = 1;
        await LoadDatasets();
    }

    private async Task SearchDatasets()
    {
        currentPage = 1;
        await LoadDatasets();
    }

    private async Task ClearFilters()
    {
        searchName = "";
        selectedType = null;
        selectedStatus = null;
        currentPage = 1;
        await LoadDatasets();
    }

    private async Task OnPageChange(PaginationEventArgs args)
    {
        currentPage = args.Page;
        await LoadDatasets();
    }

    private void ShowCreateModal()
    {
        editingDataset = null;
        currentDatasetRequest = new CreateDatasetRequest();
        tagsInput = "";
        createEditModalVisible = true;
    }

    private void ShowEditModal(DatasetDto dataset)
    {
        editingDataset = dataset;
        currentDatasetRequest = new CreateDatasetRequest
        {
            Name = dataset.Name,
            Description = dataset.Description,
            Type = dataset.Type,
            Creator = dataset.Creator,
            Tags = dataset.Tags.ToList()
        };
        tagsInput = "";
        createEditModalVisible = true;
    }

    private async Task SaveDataset()
    {
        if (string.IsNullOrWhiteSpace(currentDatasetRequest.Name))
        {
            _ = MessageService.Warning("请输入数据集名称");
            return;
        }

        saveLoading = true;
        StateHasChanged();

        try
        {
            if (editingDataset == null)
            {
                // 创建数据集
                var result = await DatasetService.CreateDatasetAsync(currentDatasetRequest);
                if (result.Success)
                {
                    _ = MessageService.Success(result.Message);
                    createEditModalVisible = false;
                    await LoadDatasets();
                }
                else
                {
                    _ = MessageService.Error(result.Message);
                }
            }
            else
            {
                // 更新数据集
                var result = await DatasetService.UpdateDatasetAsync(editingDataset.Id, currentDatasetRequest);
                if (result.Success)
                {
                    _ = MessageService.Success(result.Message);
                    createEditModalVisible = false;
                    await LoadDatasets();
                }
                else
                {
                    _ = MessageService.Error(result.Message);
                }
            }
        }
        catch (Exception ex)
        {
            _ = MessageService.Error($"保存失败：{ex.Message}");
        }
        finally
        {
            saveLoading = false;
            StateHasChanged();
        }
    }

    private async Task DeleteDataset(Guid datasetId)
    {
        try
        {
            var result = await DatasetService.DeleteDatasetAsync(datasetId);
            if (result.Success)
            {
                _ = MessageService.Success(result.Message);
                await LoadDatasets();
            }
            else
            {
                _ = MessageService.Error(result.Message);
            }
        }
        catch (Exception ex)
        {
            _ = MessageService.Error($"删除失败：{ex.Message}");
        }
    }

    private void ViewDataset(Guid datasetId)
    {
        Navigation.NavigateTo($"/dataset-detail/{datasetId}");
    }

    /// <summary>
    /// 导出Excel
    /// </summary>
    private async Task ExportDatasetToExcel(Guid datasetId, string datasetName)
    {
        exportLoading = true;
        StateHasChanged();

        try
        {
            // 获取数据集数据项
            var exportData = await GetDatasetExportData(datasetId);

            if (!exportData.Any())
            {
                _ = MessageService.Warning("数据集中没有数据可以导出");
                return;
            }

            // 转换为Excel导出格式
            var exportList = ConvertToExportDto(exportData);

            // 使用自定义的Excel生成方法来更好地处理长文本
            var excelBytes = GenerateDetailedExcel(exportList, datasetName);

            // 生成文件名
            var fileName = $"{datasetName}_数据集_{DateTime.Now:yyyyMMdd_HHmmss}.xlsx";

            // 下载文件
            await DownloadFile(fileName, excelBytes);

            _ = MessageService.Success($"导出成功！共导出 {exportList.Count} 条记录");
        }
        catch (Exception ex)
        {
            _ = MessageService.Error($"导出失败：{ex.Message}");
        }
        finally
        {
            exportLoading = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// 导出Log文件
    /// </summary>
    private async Task ExportDatasetToLog(Guid datasetId, string datasetName)
    {
        exportLoading = true;
        StateHasChanged();

        try
        {
            // 获取数据集数据项
            var exportData = await GetDatasetExportData(datasetId);

            if (!exportData.Any())
            {
                _ = MessageService.Warning("数据集中没有数据可以导出");
                return;
            }

            // 转换为Log文件格式（不截断长文本）
            var exportList = ConvertToLogDto(exportData);

            // 生成Log文件内容
            var logContent = GenerateLogContent(exportList);
            var logBytes = System.Text.Encoding.UTF8.GetBytes(logContent);

            // 生成文件名
            var fileName = $"{datasetName}_数据集_{DateTime.Now:yyyyMMdd_HHmmss}.log";

            // 下载文件
            await DownloadFile(fileName, logBytes);

            _ = MessageService.Success($"导出成功！共导出 {exportList.Count} 条记录");
        }
        catch (Exception ex)
        {
            _ = MessageService.Error($"导出失败：{ex.Message}");
        }
        finally
        {
            exportLoading = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// 获取数据集导出数据
    /// </summary>
    private async Task<List<DatasetItemDto>> GetDatasetExportData(Guid datasetId)
    {
        var queryParams = new DatasetItemQueryParams
        {
            DatasetId = datasetId,
            Page = 1,
            PageSize = 10000, // 设置一个大的页面大小以获取所有数据
            SortField = "CreateTime",
            SortDescending = true
        };

        var result = await DatasetService.GetDatasetItemsAsync(queryParams);
        return result.List;
    }

    /// <summary>
    /// 转换为Excel导出DTO
    /// </summary>
    private List<DatasetItemExportDto> ConvertToExportDto(List<DatasetItemDto> items)
    {
        return items.Select(item => new DatasetItemExportDto
        {
            Id = item.Id.ToString(),
            Input = TruncateIfTooLong(item.Input),
            ExpectedOutput = TruncateIfTooLong(GetProcessedDatasetItemResponse(item)),
            SourceType = item.SourceTypeText,
            ModelName = item.ModelName ?? "",
            ProxyName = item.ProxyName ?? "",
            Difficulty = item.Difficulty?.ToString() ?? "",
            Quality = item.Quality?.ToString() ?? "",
            Tags = string.Join(", ", item.Tags),
            Remarks = TruncateIfTooLong(item.Remarks ?? ""),
            CreateTime = item.CreateTime.ToString("yyyy-MM-dd HH:mm:ss"),
            UpdateTime = item.UpdateTime.ToString("yyyy-MM-dd HH:mm:ss")
        }).ToList();
    }

    /// <summary>
    /// 转换为Log文件导出DTO（不截断长文本）
    /// </summary>
    private List<DatasetItemExportDto> ConvertToLogDto(List<DatasetItemDto> items)
    {
        return items.Select(item => new DatasetItemExportDto
        {
            Id = item.Id.ToString(),
            Input = item.Input,
            ExpectedOutput = GetProcessedDatasetItemResponse(item),
            SourceType = item.SourceTypeText,
            ModelName = item.ModelName ?? "",
            ProxyName = item.ProxyName ?? "",
            Difficulty = item.Difficulty?.ToString() ?? "",
            Quality = item.Quality?.ToString() ?? "",
            Tags = string.Join(", ", item.Tags),
            Remarks = item.Remarks ?? "",
            CreateTime = item.CreateTime.ToString("yyyy-MM-dd HH:mm:ss"),
            UpdateTime = item.UpdateTime.ToString("yyyy-MM-dd HH:mm:ss")
        }).ToList();
    }

    /// <summary>
    /// 生成Excel文件
    /// </summary>
    private byte[] GenerateDetailedExcel(List<DatasetItemExportDto> data, string datasetName)
    {
        var workbook = new NPOI.XSSF.UserModel.XSSFWorkbook();
        var sheet = workbook.CreateSheet($"{datasetName}_数据集");
        
        // 创建样式
        var headerStyle = workbook.CreateCellStyle();
        var headerFont = workbook.CreateFont();
        headerFont.IsBold = true;
        headerFont.FontHeightInPoints = 12;
        headerStyle.SetFont(headerFont);
        headerStyle.FillForegroundColor = NPOI.HSSF.Util.HSSFColor.Grey25Percent.Index;
        headerStyle.FillPattern = NPOI.SS.UserModel.FillPattern.SolidForeground;
        headerStyle.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
        headerStyle.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
        headerStyle.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
        headerStyle.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;
        
        var cellStyle = workbook.CreateCellStyle();
        cellStyle.WrapText = true; // 启用文本换行
        cellStyle.VerticalAlignment = NPOI.SS.UserModel.VerticalAlignment.Top;
        cellStyle.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;
        cellStyle.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;
        cellStyle.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;
        cellStyle.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;

        // 列定义
        var columns = new[]
        {
            new { Name = "数据项ID", Width = 8000, Property = "Id" },
            new { Name = "输入内容", Width = 30000, Property = "Input" },
            new { Name = "期望输出", Width = 30000, Property = "ExpectedOutput" },
            new { Name = "来源类型", Width = 3000, Property = "SourceType" },
            new { Name = "模型名称", Width = 4000, Property = "ModelName" },
            new { Name = "代理名称", Width = 4000, Property = "ProxyName" },
            new { Name = "难度", Width = 2000, Property = "Difficulty" },
            new { Name = "质量", Width = 2000, Property = "Quality" },
            new { Name = "标签", Width = 6000, Property = "Tags" },
            new { Name = "备注", Width = 8000, Property = "Remarks" },
            new { Name = "创建时间", Width = 4000, Property = "CreateTime" },
            new { Name = "更新时间", Width = 4000, Property = "UpdateTime" }
        };

        // 设置列宽
        for (int i = 0; i < columns.Length; i++)
        {
            sheet.SetColumnWidth(i, columns[i].Width);
        }

        // 创建表头
        var headerRow = sheet.CreateRow(0);
        headerRow.Height = 600;
        
        for (int i = 0; i < columns.Length; i++)
        {
            var cell = headerRow.CreateCell(i);
            cell.SetCellValue(columns[i].Name);
            cell.CellStyle = headerStyle;
        }

        // 填充数据
        for (int i = 0; i < data.Count; i++)
        {
            var row = sheet.CreateRow(i + 1);
            var item = data[i];
            
            for (int j = 0; j < columns.Length; j++)
            {
                var cell = row.CreateCell(j);
                cell.CellStyle = cellStyle;
                
                var value = GetPropertyValue(item, columns[j].Property)?.ToString() ?? "";
                cell.SetCellValue(value);
            }
            
            // 为包含长文本的行设置较大的行高
            row.Height = 2000;
        }

        // 冻结表头
        sheet.CreateFreezePane(0, 1);

        // 生成字节数组
        using var memoryStream = new MemoryStream();
        workbook.Write(memoryStream);
        return memoryStream.ToArray();
    }

    /// <summary>
    /// 生成Log文件内容（每行一个JSON对象）
    /// </summary>
    private string GenerateLogContent(List<DatasetItemExportDto> exportList)
    {
        var jsonOptions = new JsonSerializerOptions
        {
            WriteIndented = false, // 不使用缩进，保持每行一个JSON对象
            Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping,
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        };

        var logLines = exportList.Select(item => 
        {
            // 创建JSON对象
            var logObject = new
            {
                id = item.Id,
                input = DecodeUnicodeString(item.Input),
                expectedOutput = DecodeUnicodeString(item.ExpectedOutput),
                sourceType = item.SourceType,
                modelName = item.ModelName,
                proxyName = item.ProxyName,
                difficulty = item.Difficulty,
                quality = item.Quality,
                tags = item.Tags,
                remarks = DecodeUnicodeString(item.Remarks),
                createTime = item.CreateTime,
                updateTime = item.UpdateTime
            };
            
            return JsonSerializer.Serialize(logObject, jsonOptions);
        });

        return string.Join(Environment.NewLine, logLines);
    }

    /// <summary>
    /// 解码Unicode转义字符串
    /// </summary>
    private string DecodeUnicodeString(string input)
    {
        if (string.IsNullOrEmpty(input))
            return input;

        try
        {
            // 使用System.Text.RegularExpressions.Regex来解码Unicode转义字符
            return System.Text.RegularExpressions.Regex.Unescape(input);
        }
        catch (Exception)
        {
            // 如果解码失败，返回原字符串
            return input;
        }
    }

    /// <summary>
    /// 截断过长的文本以符合Excel限制
    /// </summary>
    private string TruncateIfTooLong(string text)
    {
        const int maxLength = 32000; // 留一些余量，避免超过32767的限制
        
        if (string.IsNullOrEmpty(text) || text.Length <= maxLength)
        {
            return text;
        }
        
        // 截断文本并添加提示
        var truncated = text.Substring(0, maxLength - 100);
        return truncated + "\n\n[注意：内容过长已截断，完整内容请查看Log文件导出]";
    }

    /// <summary>
    /// 反射获取属性值
    /// </summary>
    private object? GetPropertyValue(object obj, string propertyName)
    {
        return obj.GetType().GetProperty(propertyName)?.GetValue(obj);
    }

    /// <summary>
    /// 检测是否为流式请求
    /// </summary>
    private bool? ParseStreamParameter(string? requestBody)
    {
        if (string.IsNullOrEmpty(requestBody))
            return null;

        try
        {
            using var doc = System.Text.Json.JsonDocument.Parse(requestBody);
            var root = doc.RootElement;
            
            if (root.TryGetProperty("stream", out var stream))
            {
                return stream.GetBoolean();
            }
        }
        catch
        {
            // 忽略解析错误
        }

        return null;
    }

    /// <summary>
    /// 解析流式响应并合并内容
    /// </summary>
    private string ParseAndMergeStreamResponse(string? responseBody)
    {
        if (string.IsNullOrEmpty(responseBody))
            return "";

        try
        {
            var lines = responseBody.Split('\n', StringSplitOptions.RemoveEmptyEntries);
            var contentBuilder = new System.Text.StringBuilder();
            var reasoningContentBuilder = new System.Text.StringBuilder();
            string? chatId = null;
            string? modelName = null;
            int lineIndex = 0;
            
            foreach (var line in lines)
            {
                var trimmedLine = line.Trim();
                if (string.IsNullOrEmpty(trimmedLine) || trimmedLine.StartsWith("data: [DONE]"))
                    continue;
                    
                lineIndex++;
                
                // 移除 "data: " 前缀
                if (trimmedLine.StartsWith("data: "))
                {
                    trimmedLine = trimmedLine.Substring(6);
                }
                
                try
                {
                    using var doc = System.Text.Json.JsonDocument.Parse(trimmedLine);
                    var root = doc.RootElement;
                    
                    // 从第二条消息开始解析id和model（第一条通常为空）
                    if (lineIndex >= 2)
                    {
                        if (chatId == null && root.TryGetProperty("id", out var idElement) && idElement.ValueKind == JsonValueKind.String)
                        {
                            chatId = idElement.GetString();
                        }
                        
                        if (modelName == null && root.TryGetProperty("model", out var modelElement) && modelElement.ValueKind == JsonValueKind.String)
                        {
                            modelName = modelElement.GetString();
                        }
                    }
                    
                    // 检查是否有choices数组
                    if (root.TryGetProperty("choices", out var choices) && choices.ValueKind == JsonValueKind.Array)
                    {
                        foreach (var choice in choices.EnumerateArray())
                        {
                            // 流式响应只提取 delta 中的内容，避免重复
                            if (choice.TryGetProperty("delta", out var delta))
                            {
                                if (delta.TryGetProperty("content", out var content) && content.ValueKind == JsonValueKind.String)
                                {
                                    contentBuilder.Append(content.GetString());
                                }
                                
                                if (delta.TryGetProperty("reasoning_content", out var reasoningContent) && reasoningContent.ValueKind == JsonValueKind.String)
                                {
                                    reasoningContentBuilder.Append(reasoningContent.GetString());
                                }
                            }
                        }
                    }
                }
                catch (JsonException)
                {
                    // 忽略无法解析的行
                    continue;
                }
            }
            
            // 构建标准的ChatCompletion响应格式，包含合并后的内容
            var mergedResponse = new
            {
                id = chatId ?? "merged-response",
                model = modelName ?? "merged-stream",
                @object = "chat.completion",
                choices = new[]
                {
                    new
                    {
                        index = 0,
                        message = new
                        {
                            role = "assistant",
                            content = contentBuilder.ToString(),
                            reasoning_content = reasoningContentBuilder.ToString()
                        },
                        finish_reason = "stop"
                    }
                },
                usage = new
                {
                    content_length = contentBuilder.Length,
                    reasoning_content_length = reasoningContentBuilder.Length,
                    total_chunks_merged = lineIndex
                },
                created = DateTimeOffset.UtcNow.ToUnixTimeSeconds(),
                merged_at = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")
            };
            
            return System.Text.Json.JsonSerializer.Serialize(mergedResponse, new System.Text.Json.JsonSerializerOptions 
            { 
                WriteIndented = true,
                Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping
            });
        }
        catch (Exception ex)
        {
            return $"解析流式响应失败: {ex.Message}";
        }
    }

    /// <summary>
    /// 处理数据集项的响应内容：如果来源是流式请求则合并，否则返回原始内容
    /// </summary>
    private string GetProcessedDatasetItemResponse(DatasetItemDto item)
    {
        // 只处理来自请求日志的数据项
        if (item.SourceType != "RequestLog" || string.IsNullOrEmpty(item.ExpectedOutput))
        {
            return item.ExpectedOutput ?? "";
        }

        // 检查是否为流式响应（通过响应内容的格式判断）
        if (IsStreamResponseFormat(item.ExpectedOutput))
        {
            // 流式响应：使用合并逻辑
            return ParseAndMergeStreamResponse(item.ExpectedOutput);
        }
        else
        {
            // 非流式响应：返回原始内容
            return item.ExpectedOutput;
        }
    }

    /// <summary>
    /// 检测是否为流式响应格式
    /// </summary>
    private bool IsStreamResponseFormat(string? content)
    {
        if (string.IsNullOrEmpty(content))
            return false;

        // 检查是否包含流式响应的典型特征
        return content.Contains("data: ") && content.Contains("choices") && content.Contains("delta");
    }

    /// <summary>
    /// 下载文件
    /// </summary>
    private async Task DownloadFile(string fileName, byte[] fileBytes)
    {
        var base64 = Convert.ToBase64String(fileBytes);
        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, base64);
    }

    private void AddTag()
    {
        if (!string.IsNullOrWhiteSpace(tagsInput))
        {
            var tags = tagsInput.Split(',', StringSplitOptions.RemoveEmptyEntries)
                .Select(t => t.Trim())
                .Where(t => !string.IsNullOrEmpty(t) && !currentDatasetRequest.Tags.Contains(t));

            currentDatasetRequest.Tags.AddRange(tags);
            tagsInput = "";
            StateHasChanged();
        }
    }

    private void RemoveTag(string tag)
    {
        currentDatasetRequest.Tags.Remove(tag);
        StateHasChanged();
    }

    private string GetTypeColor(string type)
    {
        return type switch
        {
            "QA" => "blue",
            "Chat" => "green",
            "Completion" => "orange",
            _ => "default"
        };
    }

    private string GetStatusColor(DatasetStatus status)
    {
        return status switch
        {
            DatasetStatus.Active => "success",
            DatasetStatus.Archived => "warning",
            DatasetStatus.Deleted => "error",
            _ => "default"
        };
    }

    /// <summary>
    /// 数据集项导出DTO
    /// </summary>
    public class DatasetItemExportDto
    {
        public string Id { get; set; } = "";
        public string Input { get; set; } = "";
        public string ExpectedOutput { get; set; } = "";
        public string SourceType { get; set; } = "";
        public string ModelName { get; set; } = "";
        public string ProxyName { get; set; } = "";
        public string Difficulty { get; set; } = "";
        public string Quality { get; set; } = "";
        public string Tags { get; set; } = "";
        public string Remarks { get; set; } = "";
        public string CreateTime { get; set; } = "";
        public string UpdateTime { get; set; } = "";
    }
}

<style>
    .dataset-management-container {
        padding: 16px 24px;
        background: #f5f5f5;
        min-height: calc(100vh - 64px);
    }

    .dataset-header {
        background: #fff;
        border-radius: 8px;
        margin-bottom: 16px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
    }

    .dataset-card {
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
    }
</style> 