@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Linq
@using MME.Domain.Repositories
@using MME.Domain
@using AntDesign
@using Microsoft.AspNetCore.Components

<!-- 日志详情模态框 -->
<Modal Title="请求详情" 
       Visible="@Visible" 
       Width="1000"
       OnCancel="OnClose">
    @if (LogData != null)
    {
        <Tabs DefaultActiveKey="1">
            <TabPane Key="1" Tab="基本信息">
                <Descriptions Bordered Column="2">
                    <DescriptionsItem Title="请求ID">@LogData.RequestId</DescriptionsItem>
                    <DescriptionsItem Title="请求时间">@LogData.RequestTime.ToString("yyyy-MM-dd HH:mm:ss")</DescriptionsItem>
                    <DescriptionsItem Title="响应时间">@(LogData.ResponseTime?.ToString("yyyy-MM-dd HH:mm:ss") ?? "无")</DescriptionsItem>
                    <DescriptionsItem Title="耗时">@($"{LogData.Duration}ms")</DescriptionsItem>
                    <DescriptionsItem Title="方法">@LogData.Method</DescriptionsItem>
                    <DescriptionsItem Title="路径">@LogData.RequestPath</DescriptionsItem>
                    <DescriptionsItem Title="流式请求">
                        @{
                            var isStream = ParseStreamParameter(LogData.RequestBody);
                        }
                        @if (isStream.HasValue)
                        {
                            <Tag Color="@(isStream.Value ? TagColor.Volcano : TagColor.Blue)">
                                @(isStream.Value ? "是" : "否")
                            </Tag>
                        }
                        else
                        {
                            <span style="color: #999;">未知</span>
                        }
                    </DescriptionsItem>
                    <DescriptionsItem Title="状态码">
                        <Tag Color="@GetStatusColor(LogData.ResponseStatusCode)">@LogData.ResponseStatusCode</Tag>
                    </DescriptionsItem>
                    <DescriptionsItem Title="代理名称">
                        <Tag Color="@TagColor.Blue">@LogData.ProxyName</Tag>
                    </DescriptionsItem>
                    <DescriptionsItem Title="模型名称">
                        @if (!string.IsNullOrEmpty(LogData.ModelName))
                        {
                            <Tag Color="@TagColor.Green">@LogData.ModelName</Tag>
                        }
                        else
                        {
                            <span style="color: #999;">未知</span>
                        }
                    </DescriptionsItem>
                    <DescriptionsItem Title="User-Agent" Span="2">@LogData.UserAgent</DescriptionsItem>
                    <DescriptionsItem Title="目标URL" Span="2">@LogData.TargetUrl</DescriptionsItem>
                    @if (!string.IsNullOrEmpty(LogData.TokenUsage))
                    {
                        <DescriptionsItem Title="Token使用">
                            @ParseTokenUsage(LogData.TokenUsage)
                        </DescriptionsItem>
                    }
                    @if (!string.IsNullOrEmpty(LogData.ErrorMessage))
                    {
                        <DescriptionsItem Title="错误信息" Span="2">
                            <Text Type="@TextElementType.Danger">@LogData.ErrorMessage</Text>
                        </DescriptionsItem>
                    }
                </Descriptions>
            </TabPane>
            <TabPane Key="2" Tab="请求信息">
                <div style="margin-bottom: 16px;">
                    <Title Level="5">请求头</Title>
                    <div style="background: #1f1f1f; padding: 16px; border-radius: 8px; max-height: 200px; overflow-y: auto; border: 1px solid #e8e8e8;">
                        <pre style="margin: 0; white-space: pre-wrap; color: #d4d4d4; font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace; font-size: 13px; line-height: 1.5;">@FormatJson(LogData.RequestHeaders)</pre>
                    </div>
                </div>
                <div>
                    <Title Level="5">请求体</Title>
                    <div style="background: #1f1f1f; padding: 16px; border-radius: 8px; max-height: 300px; overflow-y: auto; border: 1px solid #e8e8e8;">
                        <pre style="margin: 0; white-space: pre-wrap; color: #d4d4d4; font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace; font-size: 13px; line-height: 1.5;">@FormatJson(LogData.RequestBody)</pre>
                    </div>
                </div>
            </TabPane>
            <TabPane Key="3" Tab="响应信息">
                <div style="margin-bottom: 16px;">
                    <Title Level="5">响应头</Title>
                    <div style="background: #1f1f1f; padding: 16px; border-radius: 8px; max-height: 200px; overflow-y: auto; border: 1px solid #e8e8e8;">
                        <pre style="margin: 0; white-space: pre-wrap; color: #d4d4d4; font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace; font-size: 13px; line-height: 1.5;">@FormatJson(LogData.ResponseHeaders)</pre>
                    </div>
                </div>
                <div>
                    <Title Level="5">响应体</Title>
                    <div style="background: #1f1f1f; padding: 16px; border-radius: 8px; max-height: 300px; overflow-y: auto; border: 1px solid #e8e8e8;">
                        <pre style="margin: 0; white-space: pre-wrap; color: #d4d4d4; font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace; font-size: 13px; line-height: 1.5;">@FormatJson(LogData.ResponseBody)</pre>
                    </div>
                </div>
            </TabPane>
            @{
                var isStreamRequest = ParseStreamParameter(LogData.RequestBody);
            }
            @if (isStreamRequest == true)
            {
                <TabPane Key="4" Tab="流式响应合并">
                    <div style="margin-bottom: 16px;">
                        <Alert Type="@AlertType.Info" ShowIcon="true" Closable="false">
                            <MessageTemplate>
                                <Text>此功能将流式响应中的多个片段合并为完整内容</Text>
                            </MessageTemplate>
                        </Alert>
                    </div>
                    <div>
                        <Title Level="5">合并后的完整响应</Title>
                        <div style="background: #1f1f1f; padding: 16px; border-radius: 8px; max-height: 400px; overflow-y: auto; border: 1px solid #e8e8e8;">
                            <pre style="margin: 0; white-space: pre-wrap; color: #d4d4d4; font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace; font-size: 13px; line-height: 1.5;">@ConvertUtils.ParseAndMergeStreamResponse(LogData.ResponseBody)</pre>
                        </div>
                    </div>
                </TabPane>
            }
        </Tabs>
    }
    
    <Footer>
        <div style="text-align: right;">
            <Button Type="@ButtonType.Primary" Icon="plus" OnClick="HandleAddToDataset">
                添加到数据集
            </Button>    
        </div>
    </Footer>
</Modal>

@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public ApiRequestLogDto? LogData { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback<ApiRequestLogDto> OnAddToDataset { get; set; }

    private async Task OnClose()
    {
        await OnCancel.InvokeAsync();
    }

    private async Task HandleAddToDataset()
    {
        if (LogData != null)
        {
            await OnAddToDataset.InvokeAsync(LogData);
        }
    }

    private string GetStatusColor(int status)
    {
        return status switch
        {
            >= 200 and < 300 => "success",
            >= 300 and < 400 => "warning",
            >= 400 and < 500 => "error",
            >= 500 => "error",
            _ => "default"
        };
    }

    private string ParseTokenUsage(string? tokenUsage)
    {
        if (string.IsNullOrEmpty(tokenUsage))
            return "";

        try
        {
            var json = JObject.Parse(tokenUsage);
            
            if (json.TryGetValue("total_tokens", out var total))
            {
                return $"{total.Value<int>()} tokens";
            }
        }
        catch
        {
            // 忽略解析错误
        }

        return "";
    }

    private string FormatJson(string? json)
    {
        if (string.IsNullOrEmpty(json))
            return "";

        // 使用 Newtonsoft.Json 递归处理多次序列化的JSON字符串
        return FormatJsonWithNewtonsoft(json);
    }

    /// <summary>
    /// 使用 Newtonsoft.Json 处理多次序列化的JSON字符串
    /// </summary>
    private string FormatJsonWithNewtonsoft(string json)
    {
        if (string.IsNullOrEmpty(json))
            return "";

        var current = json.Trim();
        
        // 最大递归深度，防止无限循环
        const int maxDepth = 10;
        int depth = 0;
        
        while (depth < maxDepth)
        {
            var previous = current;
            
            try
            {
                // 尝试解析JSON
                var parsed = JsonConvert.DeserializeObject(current);
                
                // 如果解析成功，处理可能的嵌套JSON并格式化输出
                return ProcessNestedJsonAndFormat(parsed);
            }
            catch (Newtonsoft.Json.JsonException)
            {
                // 如果解析失败，检查是否是被双引号包围的JSON字符串
                if (current.StartsWith("\"") && current.EndsWith("\"") && current.Length > 2)
                {
                    // 移除外层引号并尝试反转义
                    current = current.Substring(1, current.Length - 2);
                    
                    // 使用JsonConvert.DeserializeObject来正确处理转义字符
                    try
                    {
                        current = JsonConvert.DeserializeObject<string>(current) ?? current;
                    }
                    catch
                    {
                        // 如果反序列化失败，手动替换转义字符
                        current = current.Replace("\\\"", "\"");
                        current = current.Replace("\\\\", "\\");
                        current = current.Replace("\\n", "\n");
                        current = current.Replace("\\r", "\r");
                        current = current.Replace("\\t", "\t");
                    }
                }
                else
                {
                    // 如果不是被引号包围的字符串，说明已经处理完毕
                    break;
                }
            }
            
            // 如果字符串没有变化，说明已经处理完毕
            if (current == previous)
                break;
                
            depth++;
        }
        
        // 最后一次尝试格式化
        try
        {
            var parsed = JsonConvert.DeserializeObject(current);
            return ProcessNestedJsonAndFormat(parsed);
        }
        catch
        {
            // 如果仍然无法解析，返回原始字符串
            return current;
        }
    }

    /// <summary>
    /// 处理嵌套JSON并格式化输出
    /// </summary>
    private string ProcessNestedJsonAndFormat(object? obj)
    {
        if (obj == null)
            return "";

        try
        {
            // 递归处理对象中的字符串值，检查是否包含嵌套JSON
            var processedObj = ProcessObjectForNestedJson(obj);
            
            // 格式化输出
            return JsonConvert.SerializeObject(processedObj, Formatting.Indented);
        }
        catch
        {
            // 如果处理失败，返回原始格式化
            return JsonConvert.SerializeObject(obj, Formatting.Indented);
        }
    }

    /// <summary>
    /// 递归处理对象中的字符串值，检查并处理嵌套JSON
    /// </summary>
    private object ProcessObjectForNestedJson(object obj)
    {
        if (obj == null)
            return null;

        if (obj is JObject jObj)
        {
            var result = new JObject();
            foreach (var prop in jObj.Properties())
            {
                result[prop.Name] = JToken.FromObject(ProcessObjectForNestedJson(prop.Value));
            }
            return result;
        }
        
        if (obj is JArray jArray)
        {
            var result = new JArray();
            foreach (var item in jArray)
            {
                result.Add(JToken.FromObject(ProcessObjectForNestedJson(item)));
            }
            return result;
        }
        
        if (obj is JValue jValue && jValue.Type == JTokenType.String)
        {
            var stringValue = jValue.Value<string>();
            if (!string.IsNullOrEmpty(stringValue))
            {
                // 检查字符串是否包含嵌套的JSON
                if (IsLikelyNestedJson(stringValue))
                {
                    try
                    {
                        // 尝试解析嵌套JSON
                        var nestedJson = JsonConvert.DeserializeObject(stringValue);
                        if (nestedJson != null)
                        {
                            // 如果解析成功，将其作为对象返回（这样会在显示时保持JSON结构）
                            return new JObject(new JProperty("_nested_json", JToken.FromObject(nestedJson)));
                        }
                    }
                    catch
                    {
                        // 如果解析失败，返回原始字符串
                    }
                }
            }
            return jValue.Value;
        }
        
        if (obj is JToken token)
        {
            return token;
        }

        return obj;
    }

    /// <summary>
    /// 检查字符串是否可能包含嵌套的JSON
    /// </summary>
    private bool IsLikelyNestedJson(string text)
    {
        if (string.IsNullOrWhiteSpace(text))
            return false;

        var trimmed = text.Trim();
        
        // 简单检查：以 { 或 [ 开始，以 } 或 ] 结束，并且包含引号
        return (trimmed.StartsWith("{") && trimmed.EndsWith("}") && trimmed.Contains("\"")) ||
               (trimmed.StartsWith("[") && trimmed.EndsWith("]") && trimmed.Contains("\""));
    }

    /// <summary>
    /// 手动格式化文本显示，用于JSON解析失败的情况
    /// </summary>
    private string FormatTextManually(string text)
    {
        if (string.IsNullOrEmpty(text))
            return "";

        // 基本的格式化：添加适当的换行和缩进
        var formatted = text.Replace(",", ",\n")
                           .Replace("{", "{\n")
                           .Replace("}", "\n}")
                           .Replace("[", "[\n")
                           .Replace("]", "\n]");

        // 简单的缩进处理
        var lines = formatted.Split('\n');
        var result = new System.Text.StringBuilder();
        int indentLevel = 0;

        foreach (var line in lines)
        {
            var trimmedLine = line.Trim();
            if (string.IsNullOrEmpty(trimmedLine))
                continue;

            if (trimmedLine.Contains("}") || trimmedLine.Contains("]"))
                indentLevel = Math.Max(0, indentLevel - 1);

            result.AppendLine(new string(' ', indentLevel * 2) + trimmedLine);

            if (trimmedLine.Contains("{") || trimmedLine.Contains("["))
                indentLevel++;
        }

        return result.ToString();
    }

    private bool? ParseStreamParameter(string? requestBody)
    {
        if (string.IsNullOrEmpty(requestBody))
            return null;

        try
        {
            var json = JObject.Parse(requestBody);
            
            if (json.TryGetValue("stream", out var stream))
            {
                return stream.Value<bool>();
            }
        }
        catch
        {
            // 忽略解析错误
        }

        return null;
    }

    /// <summary>
    /// 解码Unicode转义字符串
    /// </summary>
    private string DecodeUnicodeString(string input)
    {
        if (string.IsNullOrEmpty(input))
            return input;

        try
        {
            // 使用System.Text.RegularExpressions.Regex来解码Unicode转义字符
            return System.Text.RegularExpressions.Regex.Unescape(input);
        }
        catch (Exception)
        {
            // 如果解码失败，返回原字符串
            return input;
        }
    }
}
