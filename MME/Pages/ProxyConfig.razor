@page "/proxy-config"
@using MME.Domain.Models
@using MME.Domain.Services
@using AntDesign
@inject IProxyService ProxyService
@inject IMessageService MessageService
@inject IJSRuntime JSRuntime

<PageTitle>代理配置管理</PageTitle>

<div class="page-container">
    <PageHeader Title="代理配置管理" SubTitle="管理OpenAI API代理配置">
        <PageHeaderExtra>
            <Button Type="@ButtonType.Primary" Icon="plus" OnClick="ShowCreateModal">
                添加配置
            </Button>
        </PageHeaderExtra>
    </PageHeader>

    <Card>
        <Table DataSource="@configs" TItem="MME.Domain.Models.ProxyConfig" Loading="@loading" Bordered>
            <AntDesign.Column Title="配置名称" DataIndex="Name" TData="string" />
            <AntDesign.Column Title="目标地址" DataIndex="TargetUrl" TData="string">
                <Text Code>@context.TargetUrl</Text>
            </AntDesign.Column>
            <AntDesign.Column Title="Bearer Token" DataIndex="BearerToken" TData="string">
                <div style="display: flex; align-items: center; gap: 8px;">
                    <Text Code Copyable>@context.BearerToken</Text>
                    <Button Type="@ButtonType.Link" Size="@ButtonSize.Small" 
                            Icon="reload" OnClick="() => RefreshToken(context.Id)">
                        刷新
                    </Button>
                </div>
            </AntDesign.Column>
            <AntDesign.Column Title="状态" DataIndex="IsEnabled" TData="bool">
                <Switch Value="@context.IsEnabled" OnChange="(value) => ToggleConfig(context.Id, value)" />
            </AntDesign.Column>
            <AntDesign.Column Title="创建时间" DataIndex="CreateTime" TData="DateTime" Format="yyyy-MM-dd HH:mm:ss" />
            <ActionColumn Title="操作">
                <Space>
                    <SpaceItem>
                        <Button Type="@ButtonType.Primary" Size="@ButtonSize.Small" 
                                Icon="edit" OnClick="() => ShowEditModal(context)">
                            编辑
                        </Button>
                    </SpaceItem>
                    <SpaceItem>
                        <Popconfirm Title="确定要删除这个配置吗？" 
                                    OnConfirm="() => DeleteConfig(context.Id)">
                            <Button Type="@ButtonType.Primary" Danger Size="@ButtonSize.Small" 
                                    Icon="delete">
                                删除
                            </Button>
                        </Popconfirm>
                    </SpaceItem>
                </Space>
            </ActionColumn>
        </Table>
    </Card>
</div>

<!-- 创建/编辑模态框 -->
<Modal Title="@(editingConfig == null ? "创建代理配置" : "编辑代理配置")" 
       Visible="@modalVisible" 
       OnOk="@HandleOk" 
       OnCancel="@HandleCancel"
       ConfirmLoading="@modalLoading">
    <Form Model="@configForm" LabelCol="new ColLayoutParam { Span = 6 }" WrapperCol="new ColLayoutParam { Span = 18 }">
        <FormItem Label="配置名称" Required>
            <Input @bind-Value="@configForm.Name" Placeholder="请输入配置名称" />
        </FormItem>
        <FormItem Label="目标地址" Required>
            <Input @bind-Value="@configForm.TargetUrl" Placeholder="例如：https://api.openai.com" />
        </FormItem>
        <FormItem Label="API密钥" Required>
            <InputPassword @bind-Value="@configForm.ApiKey" Placeholder="请输入API密钥" />
        </FormItem>
        <FormItem Label="描述">
            <TextArea @bind-Value="@configForm.Description" Placeholder="请输入描述信息" Rows="3" />
        </FormItem>
        <FormItem Label="支持的接口">
            <CheckboxGroup @bind-Value="@selectedPaths" Options="@pathOptions" />
        </FormItem>
    </Form>
</Modal>

@code {
    private List<MME.Domain.Models.ProxyConfig> configs = new();
    private bool loading = false;
    private bool modalVisible = false;
    private bool modalLoading = false;
    private MME.Domain.Models.ProxyConfig? editingConfig = null;
    private ConfigForm configForm = new();
    private string[] selectedPaths = { "/v1/chat/completions", "/v1/embeddings", "/v1/rerank" };

    private CheckboxOption<string>[] pathOptions = new[]
    {
        new CheckboxOption<string> { Label = "Chat Completions", Value = "/v1/chat/completions" },
        new CheckboxOption<string> { Label = "Embeddings", Value = "/v1/embeddings" },
        new CheckboxOption<string> { Label = "Rerank", Value = "/v1/rerank" },
        new CheckboxOption<string> { Label = "Models", Value = "/v1/models" },
        new CheckboxOption<string> { Label = "Fine-tuning", Value = "/v1/fine_tuning/jobs" }
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadConfigs();
    }

    private async Task LoadConfigs()
    {
        loading = true;
        StateHasChanged();
        
        try
        {
            configs = await ProxyService.GetAllConfigsAsync();
        }
        catch (Exception ex)
        {
            await MessageService.Error($"加载配置失败：{ex.Message}");
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private void ShowCreateModal()
    {
        editingConfig = null;
        configForm = new ConfigForm();
        selectedPaths = new[] { "/v1/chat/completions", "/v1/embeddings", "/v1/rerank" };
        modalVisible = true;
    }

    private void ShowEditModal(MME.Domain.Models.ProxyConfig config)
    {
        editingConfig = config;
        configForm = new ConfigForm
        {
            Name = config.Name,
            TargetUrl = config.TargetUrl,
            ApiKey = config.ApiKey,
            Description = config.Description
        };
        
        try
        {
            selectedPaths = System.Text.Json.JsonSerializer.Deserialize<string[]>(config.SupportedPaths) ?? new string[0];
        }
        catch
        {
            selectedPaths = new[] { "/v1/chat/completions", "/v1/embeddings", "/v1/rerank" };
        }
        
        modalVisible = true;
    }

    private async Task HandleOk()
    {
        if (string.IsNullOrWhiteSpace(configForm.Name) || 
            string.IsNullOrWhiteSpace(configForm.TargetUrl) || 
            string.IsNullOrWhiteSpace(configForm.ApiKey))
        {
            await MessageService.Warning("请填写所有必填字段");
            return;
        }

        modalLoading = true;
        StateHasChanged();

        try
        {
            if (editingConfig == null)
            {
                await ProxyService.CreateConfigAsync(
                    configForm.Name,
                    configForm.TargetUrl,
                    configForm.ApiKey,
                    configForm.Description);
                await MessageService.Success("配置创建成功");
            }
            else
            {
                await ProxyService.UpdateConfigAsync(
                    editingConfig.Id,
                    configForm.Name,
                    configForm.TargetUrl,
                    configForm.ApiKey,
                    configForm.Description);
                await MessageService.Success("配置更新成功");
            }

            modalVisible = false;
            await LoadConfigs();
        }
        catch (Exception ex)
        {
            await MessageService.Error($"操作失败：{ex.Message}");
        }
        finally
        {
            modalLoading = false;
            StateHasChanged();
        }
    }

    private void HandleCancel()
    {
        modalVisible = false;
        configForm = new ConfigForm();
        editingConfig = null;
    }

    private async Task DeleteConfig(long id)
    {
        try
        {
            await ProxyService.DeleteConfigAsync(id);
            await MessageService.Success("配置删除成功");
            await LoadConfigs();
        }
        catch (Exception ex)
        {
            await MessageService.Error($"删除失败：{ex.Message}");
        }
    }

    private async Task ToggleConfig(long id, bool isEnabled)
    {
        try
        {
            await ProxyService.ToggleConfigAsync(id, isEnabled);
            await MessageService.Success(isEnabled ? "配置已启用" : "配置已禁用");
            await LoadConfigs();
        }
        catch (Exception ex)
        {
            await MessageService.Error($"操作失败：{ex.Message}");
        }
    }

    private async Task RefreshToken(long id)
    {
        try
        {
            var newToken = await ProxyService.RefreshBearerTokenAsync(id);
            await MessageService.Success("Token刷新成功");
            await LoadConfigs();
        }
        catch (Exception ex)
        {
            await MessageService.Error($"刷新失败：{ex.Message}");
        }
    }

    public class ConfigForm
    {
        public string Name { get; set; } = string.Empty;
        public string TargetUrl { get; set; } = string.Empty;
        public string ApiKey { get; set; } = string.Empty;
        public string? Description { get; set; }
    }
}

<style>
    .page-container {
        padding: 24px;
    }
</style> 